/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TodosRouteImport } from './routes/todos'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as LoginTestRouteImport } from './routes/loginTest'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ForgotRouteImport } from './routes/forgot'
import { Route as EditusersRouteImport } from './routes/editusers'
import { Route as IndexRouteImport } from './routes/index'

const TodosRoute = TodosRouteImport.update({
  id: '/todos',
  path: '/todos',
  getParentRoute: () => rootRouteImport,
} as any)
const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginTestRoute = LoginTestRouteImport.update({
  id: '/loginTest',
  path: '/loginTest',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ForgotRoute = ForgotRouteImport.update({
  id: '/forgot',
  path: '/forgot',
  getParentRoute: () => rootRouteImport,
} as any)
const EditusersRoute = EditusersRouteImport.update({
  id: '/editusers',
  path: '/editusers',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/editusers': typeof EditusersRoute
  '/forgot': typeof ForgotRoute
  '/login': typeof LoginRoute
  '/loginTest': typeof LoginTestRoute
  '/signup': typeof SignupRoute
  '/todos': typeof TodosRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/editusers': typeof EditusersRoute
  '/forgot': typeof ForgotRoute
  '/login': typeof LoginRoute
  '/loginTest': typeof LoginTestRoute
  '/signup': typeof SignupRoute
  '/todos': typeof TodosRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/editusers': typeof EditusersRoute
  '/forgot': typeof ForgotRoute
  '/login': typeof LoginRoute
  '/loginTest': typeof LoginTestRoute
  '/signup': typeof SignupRoute
  '/todos': typeof TodosRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/editusers'
    | '/forgot'
    | '/login'
    | '/loginTest'
    | '/signup'
    | '/todos'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/editusers'
    | '/forgot'
    | '/login'
    | '/loginTest'
    | '/signup'
    | '/todos'
  id:
    | '__root__'
    | '/'
    | '/editusers'
    | '/forgot'
    | '/login'
    | '/loginTest'
    | '/signup'
    | '/todos'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  EditusersRoute: typeof EditusersRoute
  ForgotRoute: typeof ForgotRoute
  LoginRoute: typeof LoginRoute
  LoginTestRoute: typeof LoginTestRoute
  SignupRoute: typeof SignupRoute
  TodosRoute: typeof TodosRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/todos': {
      id: '/todos'
      path: '/todos'
      fullPath: '/todos'
      preLoaderRoute: typeof TodosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/loginTest': {
      id: '/loginTest'
      path: '/loginTest'
      fullPath: '/loginTest'
      preLoaderRoute: typeof LoginTestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/forgot': {
      id: '/forgot'
      path: '/forgot'
      fullPath: '/forgot'
      preLoaderRoute: typeof ForgotRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/editusers': {
      id: '/editusers'
      path: '/editusers'
      fullPath: '/editusers'
      preLoaderRoute: typeof EditusersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  EditusersRoute: EditusersRoute,
  ForgotRoute: ForgotRoute,
  LoginRoute: LoginRoute,
  LoginTestRoute: LoginTestRoute,
  SignupRoute: SignupRoute,
  TodosRoute: TodosRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
